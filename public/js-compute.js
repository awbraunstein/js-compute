// Generated by CoffeeScript 1.3.3
(function() {
  var getUrlForWorker, worker, workerFunction, workerUrl,
    _this = this;

  workerFunction = function() {
    var runCode, start,
      _this = this;
    start = function() {
      var cond;
      _this.more = false;
      cond = function() {
        return _this.more;
      };
      return _this.doWhile(runCode, cond);
    };
    runCode = function() {
      var request, response, taskId;
      taskId = 8;
      importScripts("http://5a3t.localtunnel.com/task/" + taskId + "/work");
      response = {
        result: task(params),
        input: params
      };
      request = new XMLHttpRequest();
      request.open('POST', "http://5a3t.localtunnel.com/task/" + taskId + "/work", false);
      request.setRequestHeader("Content-type", "application/json");
      request.send(JSON.stringify(response));
      if (request.status === 200) {
        return _this.more = JSON.parse(request.responseText).more || false;
      }
    };
    this.onmessage = function(event) {
      return start();
    };
    this.doWhile = function(func, condition) {
      var _results;
      func();
      _results = [];
      while (condition()) {
        _results.push(func());
      }
      return _results;
    };
  };

  getUrlForWorker = function(workerFunction) {
    var BlobBuilder, URL, bb, bodyString, mainString;
    BlobBuilder = window.MozBlobBuilder || window.WebKitBlobBuilder || window.BlobBuilder;
    URL = window.URL || window.webkitURL;
    mainString = workerFunction.toString();
    bodyString = mainString.substring(mainString.indexOf("{") + 1, mainString.lastIndexOf("}"));
    bb = new BlobBuilder();
    bb.append(bodyString);
    return URL.createObjectURL(bb.getBlob());
  };

  workerUrl = getUrlForWorker(workerFunction);

  worker = new Worker(workerUrl);

  worker.onmessage = function(event) {
    console.log(event.data);
  };

  worker.postMessage();

}).call(this);
